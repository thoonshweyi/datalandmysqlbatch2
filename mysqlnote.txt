=>Database
    =>Show databases
        SHOW DATABASES;
    
    =>Create a new database
        CREATE DATABASE databasename;
    
    =>Delete a database
        DROP DATABASE databasename;

    =>Choose database
        USE databasename;

=>Table
    * Database must be choosen before anything changes happen to table.
    =>Show tables
        SHOW TABLES;
        SHOW FULL TABLES;

        SHOW TABLES FROM databasename;
        SHOW TABLES IN databasename;

        SHOW FULL TABLES FROM databasename;
        SHOW FULL TABLES IN databasename;
    =>Create a new Table
        CREATE TABLE tablename(
            colume1 datatype,
            colume2 datatype,
            colume3 datatype,
            ...
        );

        CREATE TABLE IF NOT EXISTS tablename(
            colume1 datatype,
            colume2 datatype,
            colume3 datatype,
            ...
        );

        =>data type
            INT 
            VARCHAR(size)
    
    =>Show table structure
        -Method 1
            DESCRIBE tablename;
            DESC tablename; 

        -Method 2
            SHOW COLUMNS FROM tablename;

            SHOW COLUMNS FROM databasename.tablename;
            SHOW COLUMNS FROM tablename IN databasename;
    =>Delete a table
        -Single
            DROP TABLE tablename;
            DROP TABLE IF EXISTS tablename;

            DROP TABLE databasename.tablename;
            DROP TABLE IF EXISTS databasename.tablename;
        -Multi
            DROP TABLE tablename,tablename,tablename,...;
            DROP TABLE IF EXISTS tablename,tablename,tablename,...;

            DROP TABLE databasename.tablename,databasename.tablename,databasename.tablename,...;
            DROP TABLE IF EXISTS databasename.tablename,databasename.tablename,databasename.tablename,...;

    =>Rename table
        ALTER TABLE tablename
        RENAME TO newtablename;

=>Row
    => Insert Data Into Table
        -Single
            -Method 1
                INSERT INTO tablename (column1,column2,column3,...)
                VALUE (value1,value2,value3,...);

            -Method 2
                INSERT INTO tablename
                VALUE (value1,value2,value3,...);
        
        -Multi
            -Method 1
                INSERT INTO tablename (column1,column2,column3,...)
                VALUES (value1,value2,value3,...),
                        (value1,value2,value3,...),
                        ...;
            -Method 2
                INSERT INTO tablename
                VALUES (value1,value2,value3,...),
                        (value1,value2,value3,...),
                        ...;
        
         /*
            -column and value must be order
            -Method 2 must give values to all columns
         */
         
    =>Select Data
        SELECT * FROM tablename;
        SELECT colume1,colume2,colume3,... FROM tablename;
        
        //SELECT column order only affect at result and do not affect original table 
        
        =>Alias
            //result comeout as alias name and just affect result
            =>Syntax
                SELECT columnname AS aliasname FROM tablename;

                SELECT columnname AS 'alias name' FROM tablename;

            =>Exercise
                SELECT id,firstname AS fstname,lastname AS lstname FROM members; 
                
                SELECT id,firstname AS 'first name',lastname AS 'last name' FROM members; 

=>Constraints
    =>NULL & NOT NULL
        CREATE TABLE IF NOT EXISTS students(
            name VARCHAR(10),
            age INT(5)
        );
        INSERT INTO students(name,age)
        VALUE('aung aung',20);

        INSERT INTO students(name)
        VALUE('aye aye');

        INSERT INTO students(age)
        VALUE(20);

        INSERT INTO students()
        VALUE();

        INSERT INTO students()
        VALUE();

        //aung aung, 20
        //aye aye, NULL
        //NULL, 20
        //NULL, NULL
        //NULL, NULL


        CREATE TABLE IF NOT EXISTS students(
            name NOT NULL VARCHAR(10),
            age INT(5)
        );

        DESC students;
        /*
            NULL = 'NO' for NOT NULL column
            NULL = 'YES' for default and NULL column
        */

        INSERT INTO students(name,age)
        VALUE('aung aung',20);

        INSERT INTO students(name)
        VALUE('aye aye');

        *error
        INSERT INTO students(age)
        VALUE(20);

        *error
        INSERT INTO students()
        VALUE();

        *error
        INSERT INTO students()
        VALUE();

        *because of version no error. Blur('') inserted

    =>DEFAULT
        
        CREATE TABLE vehicles(
            brand VARCHAR(100) DEFAULT "unnamed",
            madeby VARCHAR(20) NOT NULL DEFAULT "china",
        );

        DESC vehicles;
        /*
            DEFAULT = 'value' for DEFAULT column
        */

        INSERT INTO vehicles(brand,madeby)
        VALUE ("toyota","japan");

        INSERT INTO vehicles(brand)
        VALUE ("suzuki");

        INSERT INTO vehicles(madeby)
        VALUE ("us");

        INSERT INTO vehicles()
        VALUE();

        /*
            toyota,japan
            susuki,china
            unnamed,us
            unnamed,china
        */

        /*
            Default column never NULL
        */

    =>Primary key
        -use for table relationship
        -unique
        
        -Method 1
            CREATE TABLE IF NOT EXISTS persons(
                id INT NOT NULL PRIMARY KEY,
                firstname VARCHAR(255) NOT NULL,
                lastname VARCHAR(255)
                age INT
            );
        
        -Methoc 2
            CREATE TABLE IF NOT EXISTS persons(
                id INT NOT NULL,
                firstname VARCHAR(255) NOT NULL,
                lastname VARCHAR(255),
                age INT,
                PRIMARY KEY (id)
            );

        DESC persons;
        /*
            KEY = "PRI" for PRIMARY KEY column
            primary key column auto NOT NULL
        */
    
    =>AUTO_INCREMENT
        CREATE TABLE IF NOT EXISTS computers(
            id INT NOT NULL AUTO_INCREMENT,
            brand VARCHAR(255),
            type VARCHAR(255),
            PRPIMARY Key(id);
        );

        INSERT INTO computers(brand,type)
        VALUE('asus','china');

        INSERT INTO computers(brand,type)
        VALUE(10,'acer',china');

        INSERT INTO computers(brand,type)
        VALUE('hp',thai');

        INSERT INTO computers(brand,type)
        VALUE(4,'samsung','korea');

        INSERT INTO computers(brand,type)
        VALUE('nokia','japan');

        /*
            1, asus, china
            10, acer, china
            11, hp, thai
            4, samsung, korea
            12, nokia, japan
        */

    =>FOREIGN KEY

    =>UNIQUE
        ...

    =>CHECK
    
=>Ctn Table
        
    =>Add new column
        -Single    
            -Method 1
                ALTER TABLE tablename
                ADD COLUMN columnname datatype;

            -Method 2
                ALTER TABLE tablename
                ADD COLUMN columnname datatype FIRST|AFTER existingcolumnname;

        -Multi    
            -Method 1
                ALTER TABLE tablename
                ADD COLUMN columnname1 datatype,
                ADD COLUMN columnname2 datatype,
                ...;

            -Method 2
                ALTER TABLE tablename
                ADD COLUMN columnname1 datatype FIRST|AFTER existingcolumnname
                ADD COLUMN columnname2 datatype FIRST|AFTER existingcolumnname
                ...;

                /*
                    FIRST at the first place of the columns.
                    AFTER take after the existing column.
                */

            /*
                Values at the added column are 'NULL' value if it accept NULL value .
                Values at the added column are '0' value if it do not accept NULL value (NOT NULL) and datatype INT.
                Values at the added column are '0.00' value if it do not accept NULL value (NOT NULL) and datatype DECIMAL(10,2).
                Values at the added column are '' value if it do not accept NULL value (NOT NULL) and datatype VARCHAR(size).
            */        
    
    =>Rename Column
        ALTER TABLE tablename
        CHANGE COLUMN oldcolumnname newcolumnname datatype;

    =>Modify Column
        -Single
            ALTER TABLE tablename
            MODIFY columnname newdatatype;
        -Multi
            ALTER TABLE tablename
            MODIFY columnname newdatatype,
            MODIFY columnname newdatatype,
            ...;
    
    =>Move Column
        ALTER TABLE tablename
        MODIFY columnname datatype FIRST|AFTER existingcolumnname;

    =>Drop Column
        -Single
            ALTER TABLE tablename
            DROP COLUMN columnname;
        -Multi
            ALTER TABLE tablename
            DROP COLUMN columnname,
            DROP COLUMN columnname,
            ...;

    =>Add Primary Key
        -Method 1
            ALTER TABLE itaccessories
            ADD COLUMN id INT NOT NULL AUTO_INCREMENT PRPIMARY KEY FIRST;

        -Method 2
            ALTER TABLE itaccessories
            ADD COLUMN id INT NOT NULL AUTO_INCREMENT FIRST,
            ADD PRIMARY KEY(id);

        SHOW INDEX FROM tablename; // to check key

        /*
            ---------------------------------------------------
            Table           Key_name                Column_name
            ---------------------------------------------------
            itaccessories   PRIMARY                 id
        */

    =>Drop Primary Key
        -AUTO_INCREMENT Primary Key drop with 2 steps
         1.Remove AUTO_INCREMENT
         2.DROP Primary Key

        ALTER TABLE itaccessories
        MODIFY id INT NOT NULL;

        ALTER TABLE itaccessories
        DROP PRPIMARY KEY;

    =>ADD Unique Key

        -Method 1
            ALTER TABLE itaccessories
            ADD UNIQUE(item);

            DESC itaccessories
                /*
                    Key = "UNI" for UNIQUE KEY column
                */

            SHOW INDEX FROM itaccessories;
                /*
                    ---------------------------------------------------
                    Table           Key_name                Column_name
                    ---------------------------------------------------
                    itaccessories   item                    item
                */

            /*
                -Unique Key can't be duplicate 
                -'Mouse' and 'mouse' duplicate.
            */

        -Method 2
            ALTER TABLE itaccessories
            ADD CONSTRAINT uc_item_totalqty UNIQUE (item,totalqty);

            DESC itaccessories
                /*
                    Key = "MUL" for item
                */

            SHOW INDEX FROM itaccessories;
                /*
                    ---------------------------------------------------
                    Table           Key_name                Column_name
                    ---------------------------------------------------
                    itaccessories   uc_item_totalqty        item
                    itaccessories   uc_item_totalqty        totalqty
                */

            /*
                'maung maung, 20' and 'maung maung, 30' doesn't duplicate.
            */
    
    =>Drop Unique Key
        -Method 1
            ALTER TABLE itaccessories
            DROP INDEX item;

        -Method 2
            ALTER TABLE itaccessories
            DROP INDEX uc_item_totalqty;

    =>Clone|Copy Table
        =>Syntax
            CREATE TABLE IF NOT EXISTS newtable AS 
            SELECT * FROM existingtable;

        CREATE TABLE IF NOT EXISTS workers AS
        SELECT * FROM members;

        DESC workers;
        // get table structre as members and members table datas  
        // but PRIMARY KEY AND AUTO_INCREMENT is not include
        
=>MYSQL String Method

    =>CONCAT()
        =>Syntax
            CONCAT(string,string,...);
    
        SELECT CONCAT('Hello',"World"); // HelloWorld
        SELECT CONCAT('Hello',"...","World"); //Hello...World
        SELECT CONCAT("Hello",123); // Hello123
        SELECT CONCAT(10,20); // 1020

        =>Exercise
            SELECT CONCAT(firstname,' ',lastname) FROM members; // Aye Mya
            SELECT CONCAT(firstname,' ',lastname) AS fullname FROM members; // Aye Mya
            SELECT firstname,lastname,CONCAT(firstname,' ',lastname) AS fullname,age FROM members; // Aye, Mya, Aye Mya, 25

        =>CONCAT_WS() - Concat With Seperator

            CONCAT_WS('seperator','string','string',...);

            SELECT CONCAT_WS("-",firstname,lastname,age) FROM members; // Aye-Mya-25

    =>SUBSTRING()
        =>Syntax
            SUBSTRING('string',start,space);
            SUBSTRING('string',start); // from the start index to the end of string
            SUBSTRING('string',-start); // start count from the end of string

            SUBSTR('string',start,space);

            *MYSQL start index at 1.

        SELECT SUBSTRING("Hello World",0,4); // no result
        SELECT SUBSTRING("Hello World",1,4); // Hell
        SELECT SUBSTRING("Hello World",2,4); // ello

        SELECT SUBSTR('MYSQL Online Class',7); // Online Class

        SELECT SUBSTR("MYSQL Online Class",-7); // e Class

        =>Exercise

            SELECT SUBSTRING(address,1,10) FROM PERSONS; // no 10,thit
            SELECT SUBSTRING(address,1,10) AS 'short address' FROM PERSONS; // no 10,thit

        =>SUBSTRING() With CONCAT()
            SELECT CONCAT(SUBSTRING(address,1,7),'...') FROM persons; // no.29,m...

    =>REPLACE()
        =>Syntax
            REPLACE(originalstring,ori part, newstring);
            *case sensitive
            *replace all matches

        SELECT REPLACE("Hello World","Hell","Zer"); //Zero World
        SELECT REPLACE("Hello World","hell","Zer"); //Hello World // no action
        SELECT REPLACE("Hello World","o",0); //Hell0 W0rld

        =>Exercise
            SELECT REPLACE('city',"m","M") FROM persons; // Mandalay, MawlaMyine
            SELECT REPLACE('city',"m","M") AS capital FROM persons; // Mandalay, MawlaMyine

        =>REPLACE() With SUBSTRING() And CONCAT()
            SELECT CONCAT(SUBSTRING(REPLACE(address,'n','N'),1,10),'...') AS 'short address'
            FROM persons; 
            
            //No 10,thit...

    =>REVERSE()
        =>Syntax
            REVERSE(string)

        SELECT REVERSE("Hello World"); // dlroW olleH

        =>Exercise
            SELECT REVERSE(firstname) FROM persons; // tuth nit

        =>REVERSE() With CONCAT()
            SELECT CONCAT(firstname," = ",REVERSE(firstname)) FROM persons; //tin htut = tuth nit
    
    =>CHAR_LENGTH()  
        =>Syntax
            CHAR_LENGTH(string)

        SELECT CHAR_LENGTH("Hello World")// 11

        =>Exercise
            SELECT CHAR_LENGTH(firstname) FROM persons; //8
            SELECT firstname,CHAR_LENGTH(firstname) AS 'total count' FROM persons; //tin htut, 8

        =>CHAR_LENGTH() With CONCAT()

            SELECT CONCAT(firstname," is ",CHAR_LENGTH(firstname)," characters long.") AS length 
            FROM persons;
            //maung is 5 characters long.

        *'sql-format.com' to format sql code
    
    =>UPPER() & LOWER()

        =>Syntax
            UPPER(string)
            LOWER(string)

        SELECT UPPER('Hello World'); // HELLO World
        SELECT LOWER('Hello World'); // hello World

        =>Exercise
            SELECT UPPER(firstname) FROM persons; // TIN HTUT
            SELECT LOWER(CITY) FROM persons; // mandalay

        =>UPPER() and LOWER() With CONCAT()

            SELECT CONCAT(UPPER(firstname)," ",UPPER(firstname)," live in ",LOWER(city)) 
            FROM persons;

=>Variables
    1.SYSTEM Variables
        (i)GLOBAL Variables
        (ii)SESSION Variables
    2.User-Defined Variables
    3.Parameters and Local Variables

    =>SYSTEM Variables
        SHOW VARIABLES;
        * @@ prefix to call SYSTEM Variables

        SELECT @@warning_count();   //0 - for phpMyAdmin because of reload
        SELECT @@error_count();   //0 - for phpMyAdmin because of reload

    =>User-Defined Variables
        * @ prexis is use to call User-Defined Variables

        -Method 1 (Using SELECT)
            SELECT @myfirstvar := "Hello Myanmar";

            SELECT @myfirstvar; // NULL - for phpMyAdmin because of reload

            SELECT @myfirstvar := "Hello Myanmar";
            SELECT @myfirstvar;
            // @myfirstvar
                Hello Myanmar

            - overwrite
                SELECT @myfirstvar := "Save Myanmar";
                SELECT @myfirstvar;
                // @myfirstvar
                    Save Myanmar

        -Method 2 (Using SET)
            SET @mysecondvar = "Data Land";
            SELECT @mysecondvar;

            -overwrite
                SET @mysecondvar = "Hello Thailand";
                SELECT @mysecondvar;

        SELECT @num1 := 10;
        SELECT @num2 := 20;
        SELECT @num1 + @num2; // 30

        SELECT @num1 := '10';
        SELECT @num2 := '20';
        SELECT @num1 + @num2; // 30

=>Select Data By 'WHERE' Clause
    =>Syntax    
        SELECT * FROM tablename
        WHERE condition;

        SELECT column1, column2, column3 FROM tablename
        WHERE condition;

    - only output the match condtion Row
    - not selected column can have in condition

    =>Operators in the WHERE Clause (12 types)
        =                   - Equal
        <> or !=            - Not equal
        >                   - Greater than
        <                   - Less than
        >=                  - Greater than or equal                
        <=                  - Less than or equal
        BETWEEN AND         - Between in a centain range inclusive
        NOT BETWEEN AND     - Not Between in a centain range inclusive
        IN                  - To specify multiple possible values for a column
        NOT IN              - Not multiple possible values for a column
        LIKE                - Search for a pattern
        NOT LIKE            - Not search patern

        AND                 - must all conditions true
        OR                  - one condition true
        NOT                 - not condtion true
        -----------------------------------------------------------------------------
        => =
            - not case sensitive
            - can replace with LIKE
            - number string work

            SELECT * FROM customers
            WHERE firstname = "tin htut"; 

            SELECT * FROM customers
            WHERE firstname = "Tin Htut";

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE amount = 200000; 

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE amount = '200000'; 

        => !=

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE city != "mandalay"; 
        
        => < <= > >=
            -work with number string

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE amount < 200000; 

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE amount < '200000'; 

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE amount <= '200000'; 

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE amount > '200000'; 

            SELECT id, firstname,lastname,city,amount FROM customers
            WHERE amount >= '200000'; 

        => AND 
            =>Syntax
                SELECT * FROM tablename
                WHERE condition1 AND condition2 AND condition3 ...;

            SELECT * FROM customers
            WHERE gender = 'female' AND country = 'thailand';
        
        => OR
            =>Syntax    
                SELECT * FROM tablename
                WHERE condition1 OR condition2 OR condition3 ...;

            SELECT * FROM customers
            WHERE city = 'yangon' OR country = 'bago';

        => NOT
            =>Syntax
                SELECT * FROM tablename
                WHERE NOT condition;

            SELECT * FROM customers
            WHERE NOT country = "myanmar";

        => AND, OR, NOT
            SELECT * FROM customers
            WHERE country = 'myanmar' AND city = 'bago' OR city = 'mandalay';

            SELECT * FROM customers
            WHERE country = 'myanmar' AND (city = 'bago' OR city = 'mandalay');

        => BETWEEN AND
            SELECT id, firstname, lastname, age, amount, city FROM customers
            WHERE amount BETWEEN 200000 AND 300000;
            
            SELECT id, firstname, lastname, age, amount, city FROM customers
            WHERE amount BETWEEN 200000 AND 300000 AND city = 'mandalay';

            SELECT id, firstname, lastname, age, amount, city FROM customers
            WHERE city = 'mandalay' AND amount BETWEEN 200000 AND 300000;

            => NOT BETWEEN AND  
                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE amount NOT BETWEEN 200000 AND 300000;

                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE amount NOT BETWEEN 200000 AND 300000 AND city = "yangon";
            
        => IN
            //result = 1
            SELECT 10 IN (10,20,30,40,50,60);
            
            //result = 0
            SELECT 10 IN (100,200,300,400,500,600);


            //result = 1
            SELECT "aung aung" IN ("maung maung","aung aung","zaw zaw");
            SELECT "aung aung" IN ("maung maung","AUNG AUNG","zaw zaw");

            //result = 0
            SELECT "aung" IN ("maung maung","aung aung","zaw zaw");

            => NOT IN
                //result = 0
                SELECT 10 NOT IN (10,20,30,40,50,60);
                
                //result = 1
                SELECT 10 NOT IN (100,200,300,400,500,600);

                //result = 0
                SELECT "aung aung" NOT IN ("maung maung","aung aung","zaw zaw");
                SELECT "aung aung" NOT IN ("maung maung","AUNG AUNG","zaw zaw");

            =>Exercise
                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE city = "mandalay";

                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE city IN ("mandalay");

                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE city = "mandalay" OR city = "yangon";

                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE city IN ("mandalay","yangon");


                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE city != "mandalay";

                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE city NOT IN ("mandalay");

                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE NOT (city = "mandalay" OR city = "yangon");

                SELECT id, firstname, lastname, age, amount, city FROM customers
                WHERE city NOT IN ("mandalay","yangon");

        =>LIKE
            =>Syntax
                SELECT column1,column2,column3,...
                FROM tablename
                WHERE column LIKE "pattern";

            =>LIKE Operator's pattern (7 types)
            
                WHERE column LIKE "a%"              Find any value that start with "a"
                WHERE column LIKE "%a"              Find any value that end with "a"
                WHERE column LIKE "%or%"            Find any value that have "or" in any position 
                WHERE column LIKE "a_%"             Find any value that start with "a" and at least two characters in length
                WHERE column LIKE "a__%"            Find any value that start with "a" and at least three characters in length
                WHERE column LIKE "_r%"             Find any value that have "r" in the second position
                WHERE column LIKE "a%o"             Find any value that start with "a" and end with "o"

            =>Exercise

                SELECT * FROM customers
                WHERE firstname LIKE "tin htut";

                SELECT * FROM customers
                WHERE firstname LIKE "Tin Htut";

                SELECT * FROM customers
                WHERE amount LIKE 200000;

                =>NOT LIKE
                
                    SELECT id, firstname, lastname, city, country FROM customers
                    WHERE city NOT LIKE "mandalay";

                    SELECT id, firstname, lastname, city, country FROM customers
                    WHERE NOT city LIKE "mandalay";

                    SELECT id, firstname, lastname, city, country FROM customers
                    WHERE amount NOT LIKE 200000;

                SELECT id, firstname, lastname, age, city FROM customers
                WHERE  firstname LIKE "m%";
                //the person whose firstname start with "m"

                SELECT id, firstname, lastname, age, city FROM customers
                WHERE  firstname LIKE "%g";
                //the person whose firstname end with "g"

                SELECT id, firstname, lastname, age, city FROM customers
                WHERE  firstname LIKE "%zaw%";
                //the person whose firstname have "zaw" in any position
                // 'zaw zaw' come out

                SELECT id, firstname, lastname, age, city FROM customers
                WHERE  firstname LIKE "a__%";
                //the person whose firstname start with "a" and at least 3 characters in length

                SELECT id, firstname, lastname, age, city FROM customers
                WHERE  firstname LIKE "_a%";
                //the person whose firstname have "zaw" in the second position

                SELECT id, firstname, lastname, age, city FROM customers
                WHERE  firstname LIKE "a%g";
                //the person whose firstname start with "a"  and end with "g"

            =>Exercise ( LIKE '____')
                SELECT * FROM customers
                WHERE  amount LIKE "____";
                // exactly XXXX , 1000

                SELECT * FROM customers
                WHERE  amount LIKE "_____";
                // exactly XXXXX , 10000
            
            =>Exesrcise ( LIKE '%')
                - % is anything

                SELECT * FROM customers
                WHERE firstname LIKE "%";
                //all 40 rows come out

                SELECT * FROM customers
                WHERE firstname LIKE "\_%";
                // result = _facebook

                SELECT * FROM customers
                WHERE firstname LIKE "%\_%";
                // result = _facebook, face_book

                SELECT * FROM customers
                WHERE firstname LIKE "%\%%";
                // result = 10%happy

=>MODULE (+ - * / %)
    SELECT id, firstname, lastname, city, country FROM customers
    WHERE age + 1 = 18;
    //*result age = 17

    SELECT id, firstname, lastname, city, country FROM customers
    WHERE age - 5 = 25;
    //*result age = 30

    SELECT id, firstname, lastname, city, country FROM customers
    WHERE age * 2 = 50;
    //*result age = 25

    SELECT id, firstname, lastname, city, country FROM customers
    WHERE amount / 2 = 100000;
    //*result amount = 200000

    SELECT id, firstname, lastname, city, country FROM customers
    WHERE age % 2 = 0;
    //*result age = even number

=> ORDER BY' keyword
    =>Syntax
        SELECT column1,colume2,column3... FROM tablename
        WHERE condition
        ORDER BY column ASC|DESC;

        ASC = ascending - from a - z
                        - from min - max

        DESC = descending - fom z - a
                         - from max - min

        *derault ASC

    =>Exercise
        SELECT * FROM customers
        ORDER BY firstname ASC;

        SELECT * FROM customers
        ORDER BY firstname;

        SELECT * FROM customers
        ORDER BY firstname DESC;

        SELECT * FROM customers
        ORDER BY amount ASC;

        SELECT * FROM customers
        ORDER BY amount DESC;

        SELECT * FROM customers
        WHERE amount > 200000
        ORDER BY amount ASC;

        SELECT * FROM customers
        ORDER BY firstname,age;
        // 2 columns "ORDER BY" sort row as the second column when the first column values are same

        SELECT id, firstname, lastname, amount, city FROM customers
        ORDER BY 5 DESC;
        // sort as city

=>"LIMIT" clause
    =>Syntax
        SELECT column1, column2, column3... FROM tablename
        WHERE condition
        ORDER BY column
        LIMIT number;

        *WHERE is optional
        *ORDER BY is optional

    =>Exercise
        SELECT id, firstname, lastname, city, country FROM customers
        LIMIT 20;

        SELECT id, firstname, lastname, city, country FROM customers
        WHERE age > 25
        LIMIT 5;

        SELECT id, firstname, lastname, age, city FROM customers
        WHERE age > 25
        LIMIT 5;

        SELECT id, firstname, lastname, age, city FROM customers
        WHERE age > 25
        ORDER BY city
        LIMIT 5;

=>Aggregate Function

    =>Useful calculator Function
        - COUNT()
        - SUM()
        - AVG()
        - MIN()
        - MAX()

    =>COUNT()
        =>Syntax
            SELECT COUNT(column) FROM tablename
            WHERE condition;
        
            *WHERE is optional

        =>Exercise
            SELECT COUNT(amount) FROM customers
            WHERE amount > 300000;
            //*result = 10

            SELECT COUNT(*) FROM customers
            WHERE firstname = 'aung';
            //*result = 1
    
    =>SUM()
        =>Syntax
            SELECT SUM(column) FROM tablename
            WHERE condition;
        
            *WHERE is optional
        

        =>Exercise
            SELECT SUM(amount) FROM customers
            WHERE city = 'mandalay';

    =>AVG()
        =>Syntax
            SELECT AVG(column) FROM tablename
            WHERE condition;

            *WHERE is optional
    
        =>Exercise
            SELECT AVG(amount) FROM customers
            WHERE city = 'yangon';
            //*result = 111000.0000
   
    =>MIN()
        =>Syntax
            SELECT MIN(column) FROM tablename
            WHERE condition;
           
            *WHERE is optional

        =>Exercise
            SELECT MIN(amount) FROM customers
            WHERE city = 'yangon';

    =>MAX()
        =>Syntax
            SELECT MAX(column) FROM tablename
            WHERE condition;

            *WHERE is optional

        =>Exercise
            SELECT MAX(amount) FROM customers
            WHERE city = 'yangon';

    =>Exercise (do & don't)
        
        SELECT COUNT(*), MAX(amount) FROM customers
        WHERE city = "yangon";
        //*result = 8, 250000
        --------------------------------
        SELECT MAX(amount) FROM customers;
        //*result = 800000

        SELECT * FROM customers
        WHERE amount = 800000;

        SELECT * FROM customers
        WHERE amount = (SELECT MAX(amount) FROM customers);

        SELECT COUNT(*) FROM customers
        WHERE amount = (SELECT MAX(amount) FROM customers);
        ________________________________________________________________________________________
        //*Error        
        SELECT firstname, MIN(amount) FROM customers;

        - cause version no error
        - *result = aung, 17000
    
=>'DISTINCT' statement
    =>Syntax
        SELECT DISTINCT column1, column2, ...
        FROM tablename
        ORDER BY column

        *ORDER BY is optional

    =>Exercise
        SELECT DISTINCT city FROM customers;
        //*result = different 7 cities

        SELECT DISTINCT city  FROM customers
        ORDER BY city;
        //*result = different 7 cities by sorting ascending

        //Error (Note: Only DISTINCT column should contain in ORDER BY column)
        SELECT DISTINCT city  FROM customers
        ORDER BY age;

        
        
        SELECT DISTINCT age,city  FROM customers
        ORDER BY age;
        //*result = only collect if two column values are same

        SELECT COUNT(DISTINCT city) FROM customers;

=>String datatype

    Data Types                          Description

1.  CHAR(size)                          A fixed length string. size -> 0 - 255
2.  VARCHAR(size)                       A variable length string. size -> 0 - 255

3.  TEXT                                Hold a string with maximun size 65kb. (65,xxx)
4.  TINYTEXT                            Hold a string with maximum size 255b  (255 bytes)    
5.  MEDIUMTEXT                          Hold a string with maximum size 16mb  (16,xxx,xxx)
6.  LONGTEXT                            Hold a string with maximum size 4gb   (4,xxx,xxx,xxx)

7.  BINARY(size)                        Equal to CHAR(), but stores binary byte string.
8.  VARBINARY(size)                     Equal to VARCHAR(), but stores binary byte string.

9.  TIMYBLOB                            BLOB (Binary Large Object)
10. BLOB
11. MEDIUMBLOB
12. LONGBLOB

13. ENUM("val1","val2",...)
14. SET("val1","val2",...)

        
        

    